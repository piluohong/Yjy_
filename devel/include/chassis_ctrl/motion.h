// Generated by gencpp from file chassis_ctrl/motion.msg
// DO NOT EDIT!


#ifndef CHASSIS_CTRL_MESSAGE_MOTION_H
#define CHASSIS_CTRL_MESSAGE_MOTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_ctrl
{
template <class ContainerAllocator>
struct motion_
{
  typedef motion_<ContainerAllocator> Type;

  motion_()
    : data()
    , dist_x(0.0)
    , dist_y(0.0)
    , dist_z(0.0)
    , dir_x(0)
    , dir_y(0)
    , dir_z(0)
    , b_x(false)
    , b_y(false)
    , b_z(false)
    , b_cybergear(false)
    , action_f(false)  {
    }
  motion_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , dist_x(0.0)
    , dist_y(0.0)
    , dist_z(0.0)
    , dir_x(0)
    , dir_y(0)
    , dir_z(0)
    , b_x(false)
    , b_y(false)
    , b_z(false)
    , b_cybergear(false)
    , action_f(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _data_type;
  _data_type data;

   typedef float _dist_x_type;
  _dist_x_type dist_x;

   typedef float _dist_y_type;
  _dist_y_type dist_y;

   typedef float _dist_z_type;
  _dist_z_type dist_z;

   typedef int32_t _dir_x_type;
  _dir_x_type dir_x;

   typedef int32_t _dir_y_type;
  _dir_y_type dir_y;

   typedef int32_t _dir_z_type;
  _dir_z_type dir_z;

   typedef uint8_t _b_x_type;
  _b_x_type b_x;

   typedef uint8_t _b_y_type;
  _b_y_type b_y;

   typedef uint8_t _b_z_type;
  _b_z_type b_z;

   typedef uint8_t _b_cybergear_type;
  _b_cybergear_type b_cybergear;

   typedef uint8_t _action_f_type;
  _action_f_type action_f;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(rows)
  #undef rows
#endif
#if defined(_WIN32) && defined(cols)
  #undef cols
#endif

  enum {
    rows = 4,
    cols = 1,
  };


  typedef boost::shared_ptr< ::chassis_ctrl::motion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_ctrl::motion_<ContainerAllocator> const> ConstPtr;

}; // struct motion_

typedef ::chassis_ctrl::motion_<std::allocator<void> > motion;

typedef boost::shared_ptr< ::chassis_ctrl::motion > motionPtr;
typedef boost::shared_ptr< ::chassis_ctrl::motion const> motionConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_ctrl::motion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_ctrl::motion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_ctrl::motion_<ContainerAllocator1> & lhs, const ::chassis_ctrl::motion_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.dist_x == rhs.dist_x &&
    lhs.dist_y == rhs.dist_y &&
    lhs.dist_z == rhs.dist_z &&
    lhs.dir_x == rhs.dir_x &&
    lhs.dir_y == rhs.dir_y &&
    lhs.dir_z == rhs.dir_z &&
    lhs.b_x == rhs.b_x &&
    lhs.b_y == rhs.b_y &&
    lhs.b_z == rhs.b_z &&
    lhs.b_cybergear == rhs.b_cybergear &&
    lhs.action_f == rhs.action_f;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_ctrl::motion_<ContainerAllocator1> & lhs, const ::chassis_ctrl::motion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::chassis_ctrl::motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_ctrl::motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ctrl::motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ctrl::motion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ctrl::motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ctrl::motion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "523376a3a3e7158b7be3bb165bd17ef2";
  }

  static const char* value(const ::chassis_ctrl::motion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x523376a3a3e7158bULL;
  static const uint64_t static_value2 = 0x7be3bb165bd17ef2ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_ctrl/motion";
  }

  static const char* value(const ::chassis_ctrl::motion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 坐标(x,y,z,theta_z)，4行1列\n"
"float32[] data\n"
"int32 rows = 4\n"
"int32 cols = 1\n"
"\n"
"# xyz动作执行量\n"
"float32 dist_x # unit: mm\n"
"float32 dist_y\n"
"float32 dist_z\n"
"\n"
"# xyz动作执行方向\n"
"int32 dir_x\n"
"int32 dir_y\n"
"int32 dir_z\n"
"\n"
"# 判断xyz,b_cybergear动作执行完成\n"
"bool b_x\n"
"bool b_y\n"
"bool b_z\n"
"bool b_cybergear\n"
"\n"
"# 判断钢筋绑扎完成\n"
"bool action_f\n"
;
  }

  static const char* value(const ::chassis_ctrl::motion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_ctrl::motion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.dist_x);
      stream.next(m.dist_y);
      stream.next(m.dist_z);
      stream.next(m.dir_x);
      stream.next(m.dir_y);
      stream.next(m.dir_z);
      stream.next(m.b_x);
      stream.next(m.b_y);
      stream.next(m.b_z);
      stream.next(m.b_cybergear);
      stream.next(m.action_f);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_ctrl::motion_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "dist_x: ";
    Printer<float>::stream(s, indent + "  ", v.dist_x);
    s << indent << "dist_y: ";
    Printer<float>::stream(s, indent + "  ", v.dist_y);
    s << indent << "dist_z: ";
    Printer<float>::stream(s, indent + "  ", v.dist_z);
    s << indent << "dir_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir_x);
    s << indent << "dir_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir_y);
    s << indent << "dir_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir_z);
    s << indent << "b_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_x);
    s << indent << "b_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_y);
    s << indent << "b_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_z);
    s << indent << "b_cybergear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_cybergear);
    s << indent << "action_f: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action_f);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_CTRL_MESSAGE_MOTION_H
