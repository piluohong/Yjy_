// Generated by gencpp from file chassis_ctrl/motion.msg
// DO NOT EDIT!


#ifndef CHASSIS_CTRL_MESSAGE_MOTION_H
#define CHASSIS_CTRL_MESSAGE_MOTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_ctrl
{
template <class ContainerAllocator>
struct motion_
{
  typedef motion_<ContainerAllocator> Type;

  motion_()
    : data()
    , p_index(0)
    , v_x(0.0)
    , v_y(0.0)
    , v_z(0.0)
    , d_x(0.0)
    , d_y(0.0)
    , d_z(0.0)
    , t_x(0.0)
    , t_y(0.0)
    , t_z(0.0)
    , dir_x(0)
    , dir_y(0)
    , dir_z(0)
    , b_x(false)
    , b_y(false)
    , b_z(false)
    , b_cybergear(false)
    , action_f(false)  {
      data.assign(0.0);
  }
  motion_(const ContainerAllocator& _alloc)
    : data()
    , p_index(0)
    , v_x(0.0)
    , v_y(0.0)
    , v_z(0.0)
    , d_x(0.0)
    , d_y(0.0)
    , d_z(0.0)
    , t_x(0.0)
    , t_y(0.0)
    , t_z(0.0)
    , dir_x(0)
    , dir_y(0)
    , dir_z(0)
    , b_x(false)
    , b_y(false)
    , b_z(false)
    , b_cybergear(false)
    , action_f(false)  {
  (void)_alloc;
      data.assign(0.0);
  }



   typedef boost::array<float, 8>  _data_type;
  _data_type data;

   typedef int32_t _p_index_type;
  _p_index_type p_index;

   typedef float _v_x_type;
  _v_x_type v_x;

   typedef float _v_y_type;
  _v_y_type v_y;

   typedef float _v_z_type;
  _v_z_type v_z;

   typedef float _d_x_type;
  _d_x_type d_x;

   typedef float _d_y_type;
  _d_y_type d_y;

   typedef float _d_z_type;
  _d_z_type d_z;

   typedef float _t_x_type;
  _t_x_type t_x;

   typedef float _t_y_type;
  _t_y_type t_y;

   typedef float _t_z_type;
  _t_z_type t_z;

   typedef int32_t _dir_x_type;
  _dir_x_type dir_x;

   typedef int32_t _dir_y_type;
  _dir_y_type dir_y;

   typedef int32_t _dir_z_type;
  _dir_z_type dir_z;

   typedef uint8_t _b_x_type;
  _b_x_type b_x;

   typedef uint8_t _b_y_type;
  _b_y_type b_y;

   typedef uint8_t _b_z_type;
  _b_z_type b_z;

   typedef uint8_t _b_cybergear_type;
  _b_cybergear_type b_cybergear;

   typedef uint8_t _action_f_type;
  _action_f_type action_f;





  typedef boost::shared_ptr< ::chassis_ctrl::motion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_ctrl::motion_<ContainerAllocator> const> ConstPtr;

}; // struct motion_

typedef ::chassis_ctrl::motion_<std::allocator<void> > motion;

typedef boost::shared_ptr< ::chassis_ctrl::motion > motionPtr;
typedef boost::shared_ptr< ::chassis_ctrl::motion const> motionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_ctrl::motion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_ctrl::motion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_ctrl::motion_<ContainerAllocator1> & lhs, const ::chassis_ctrl::motion_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.p_index == rhs.p_index &&
    lhs.v_x == rhs.v_x &&
    lhs.v_y == rhs.v_y &&
    lhs.v_z == rhs.v_z &&
    lhs.d_x == rhs.d_x &&
    lhs.d_y == rhs.d_y &&
    lhs.d_z == rhs.d_z &&
    lhs.t_x == rhs.t_x &&
    lhs.t_y == rhs.t_y &&
    lhs.t_z == rhs.t_z &&
    lhs.dir_x == rhs.dir_x &&
    lhs.dir_y == rhs.dir_y &&
    lhs.dir_z == rhs.dir_z &&
    lhs.b_x == rhs.b_x &&
    lhs.b_y == rhs.b_y &&
    lhs.b_z == rhs.b_z &&
    lhs.b_cybergear == rhs.b_cybergear &&
    lhs.action_f == rhs.action_f;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_ctrl::motion_<ContainerAllocator1> & lhs, const ::chassis_ctrl::motion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::chassis_ctrl::motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_ctrl::motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ctrl::motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_ctrl::motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ctrl::motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_ctrl::motion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09cf865b2244b478628aef6da36bc73b";
  }

  static const char* value(const ::chassis_ctrl::motion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09cf865b2244b478ULL;
  static const uint64_t static_value2 = 0x628aef6da36bc73bULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_ctrl/motion";
  }

  static const char* value(const ::chassis_ctrl::motion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# (x,y,z,theta_z;....;....;)， 坐标值/z轴目标角度 （测试使用两个点）\n"
"float32[8] data  # mm\n"
"\n"
"# 当前点索引\n"
"int32 p_index\n"
"\n"
"# 定位每个目标时，三个方向的速度值\n"
"float32 v_x\n"
"float32 v_y\n"
"float32 v_z\n"
"\n"
"# xyz执行量\n"
"float32 d_x\n"
"float32 d_y\n"
"float32 d_z\n"
"\n"
"# xyz 执行时间, 用于响应截止\n"
"float32 t_x # unit: s\n"
"float32 t_y\n"
"float32 t_z\n"
"\n"
"# xyz动作执行方向\n"
"int32 dir_x\n"
"int32 dir_y\n"
"int32 dir_z\n"
"\n"
"# 判断xyz,b_cybergear动作执行完成\n"
"bool b_x\n"
"bool b_y\n"
"bool b_z\n"
"bool b_cybergear\n"
"\n"
"# 判断钢筋绑扎完成\n"
"bool action_f\n"
;
  }

  static const char* value(const ::chassis_ctrl::motion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_ctrl::motion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.p_index);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.v_z);
      stream.next(m.d_x);
      stream.next(m.d_y);
      stream.next(m.d_z);
      stream.next(m.t_x);
      stream.next(m.t_y);
      stream.next(m.t_z);
      stream.next(m.dir_x);
      stream.next(m.dir_y);
      stream.next(m.dir_z);
      stream.next(m.b_x);
      stream.next(m.b_y);
      stream.next(m.b_z);
      stream.next(m.b_cybergear);
      stream.next(m.action_f);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_ctrl::motion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_ctrl::motion_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "p_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.p_index);
    s << indent << "v_x: ";
    Printer<float>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<float>::stream(s, indent + "  ", v.v_y);
    s << indent << "v_z: ";
    Printer<float>::stream(s, indent + "  ", v.v_z);
    s << indent << "d_x: ";
    Printer<float>::stream(s, indent + "  ", v.d_x);
    s << indent << "d_y: ";
    Printer<float>::stream(s, indent + "  ", v.d_y);
    s << indent << "d_z: ";
    Printer<float>::stream(s, indent + "  ", v.d_z);
    s << indent << "t_x: ";
    Printer<float>::stream(s, indent + "  ", v.t_x);
    s << indent << "t_y: ";
    Printer<float>::stream(s, indent + "  ", v.t_y);
    s << indent << "t_z: ";
    Printer<float>::stream(s, indent + "  ", v.t_z);
    s << indent << "dir_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir_x);
    s << indent << "dir_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir_y);
    s << indent << "dir_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir_z);
    s << indent << "b_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_x);
    s << indent << "b_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_y);
    s << indent << "b_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_z);
    s << indent << "b_cybergear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_cybergear);
    s << indent << "action_f: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action_f);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_CTRL_MESSAGE_MOTION_H
