# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chassis_ctrl/motion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motion(genpy.Message):
  _md5sum = "09cf865b2244b478628aef6da36bc73b"
  _type = "chassis_ctrl/motion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# (x,y,z,theta_z;....;....;)， 坐标值/z轴目标角度 （测试使用两个点）
float32[8] data  # mm

# 当前点索引
int32 p_index

# 定位每个目标时，三个方向的速度值, 根据电机给定
float32 v_x
float32 v_y
float32 v_z

# xyz执行量
float32 d_x
float32 d_y
float32 d_z

# xyz 执行时间, 用于响应截止
float32 t_x # unit: s
float32 t_y
float32 t_z

# xyz动作执行方向
int32 dir_x
int32 dir_y
int32 dir_z

# 判断xyz,b_cybergear动作执行完成
bool b_x
bool b_y
bool b_z
bool b_cybergear

# 判断钢筋绑扎完成
bool action_f
"""
  __slots__ = ['data','p_index','v_x','v_y','v_z','d_x','d_y','d_z','t_x','t_y','t_z','dir_x','dir_y','dir_z','b_x','b_y','b_z','b_cybergear','action_f']
  _slot_types = ['float32[8]','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,p_index,v_x,v_y,v_z,d_x,d_y,d_z,t_x,t_y,t_z,dir_x,dir_y,dir_z,b_x,b_y,b_z,b_cybergear,action_f

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = [0.] * 8
      if self.p_index is None:
        self.p_index = 0
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
      if self.v_z is None:
        self.v_z = 0.
      if self.d_x is None:
        self.d_x = 0.
      if self.d_y is None:
        self.d_y = 0.
      if self.d_z is None:
        self.d_z = 0.
      if self.t_x is None:
        self.t_x = 0.
      if self.t_y is None:
        self.t_y = 0.
      if self.t_z is None:
        self.t_z = 0.
      if self.dir_x is None:
        self.dir_x = 0
      if self.dir_y is None:
        self.dir_y = 0
      if self.dir_z is None:
        self.dir_z = 0
      if self.b_x is None:
        self.b_x = False
      if self.b_y is None:
        self.b_y = False
      if self.b_z is None:
        self.b_z = False
      if self.b_cybergear is None:
        self.b_cybergear = False
      if self.action_f is None:
        self.action_f = False
    else:
      self.data = [0.] * 8
      self.p_index = 0
      self.v_x = 0.
      self.v_y = 0.
      self.v_z = 0.
      self.d_x = 0.
      self.d_y = 0.
      self.d_z = 0.
      self.t_x = 0.
      self.t_y = 0.
      self.t_z = 0.
      self.dir_x = 0
      self.dir_y = 0
      self.dir_z = 0
      self.b_x = False
      self.b_y = False
      self.b_z = False
      self.b_cybergear = False
      self.action_f = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_8f().pack(*self.data))
      _x = self
      buff.write(_get_struct_i9f3i5B().pack(_x.p_index, _x.v_x, _x.v_y, _x.v_z, _x.d_x, _x.d_y, _x.d_z, _x.t_x, _x.t_y, _x.t_z, _x.dir_x, _x.dir_y, _x.dir_z, _x.b_x, _x.b_y, _x.b_z, _x.b_cybergear, _x.action_f))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.data = _get_struct_8f().unpack(str[start:end])
      _x = self
      start = end
      end += 57
      (_x.p_index, _x.v_x, _x.v_y, _x.v_z, _x.d_x, _x.d_y, _x.d_z, _x.t_x, _x.t_y, _x.t_z, _x.dir_x, _x.dir_y, _x.dir_z, _x.b_x, _x.b_y, _x.b_z, _x.b_cybergear, _x.action_f,) = _get_struct_i9f3i5B().unpack(str[start:end])
      self.b_x = bool(self.b_x)
      self.b_y = bool(self.b_y)
      self.b_z = bool(self.b_z)
      self.b_cybergear = bool(self.b_cybergear)
      self.action_f = bool(self.action_f)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.data.tostring())
      _x = self
      buff.write(_get_struct_i9f3i5B().pack(_x.p_index, _x.v_x, _x.v_y, _x.v_z, _x.d_x, _x.d_y, _x.d_z, _x.t_x, _x.t_y, _x.t_z, _x.dir_x, _x.dir_y, _x.dir_z, _x.b_x, _x.b_y, _x.b_z, _x.b_cybergear, _x.action_f))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      _x = self
      start = end
      end += 57
      (_x.p_index, _x.v_x, _x.v_y, _x.v_z, _x.d_x, _x.d_y, _x.d_z, _x.t_x, _x.t_y, _x.t_z, _x.dir_x, _x.dir_y, _x.dir_z, _x.b_x, _x.b_y, _x.b_z, _x.b_cybergear, _x.action_f,) = _get_struct_i9f3i5B().unpack(str[start:end])
      self.b_x = bool(self.b_x)
      self.b_y = bool(self.b_y)
      self.b_z = bool(self.b_z)
      self.b_cybergear = bool(self.b_cybergear)
      self.action_f = bool(self.action_f)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_i9f3i5B = None
def _get_struct_i9f3i5B():
    global _struct_i9f3i5B
    if _struct_i9f3i5B is None:
        _struct_i9f3i5B = struct.Struct("<i9f3i5B")
    return _struct_i9f3i5B
